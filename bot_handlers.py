# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø bot.py
# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª bot.py –ø–µ—Ä–µ–¥ —Ñ—É–Ω–∫—Ü–∏–µ–π main()

# ================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ó–ê–î–ê–ù–ò–ô
# ================================
@dp.callback_query(F.data == "tasks")
async def callback_tasks(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    
    async with get_db_connection() as conn:
        # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        completed_count = await conn.fetchval('''
            SELECT COUNT(*) FROM user_tasks 
            WHERE user_id = $1 AND completed = TRUE
        ''', user_id) or 0
        
        # –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        next_task = await conn.fetchrow('''
            SELECT t.* FROM tasks t
            LEFT JOIN user_tasks ut ON t.id = ut.task_id AND ut.user_id = $1
            WHERE t.is_active = TRUE AND (ut.completed IS NULL OR ut.completed = FALSE)
            ORDER BY t.created_at
            LIMIT 1
        ''', user_id)
    
    if next_task:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", url=next_task['url'])],
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data=f"check_task_{next_task['id']}")],
            [InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_task")],
            [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(
            f"üìã <b>–ó–∞–¥–∞–Ω–∏—è</b>\n\n"
            f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {completed_count}\n\n"
            f"üìù <b>–¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ:</b>\n"
            f"üéØ {next_task['name']}\n"
            f"üí´ –ù–∞–≥—Ä–∞–¥–∞: {next_task['reward']} –∑–≤—ë–∑–¥\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤ÔøΩÔøΩ—à–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è, –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.",
            reply_markup=keyboard, parse_mode="HTML"
        )
    else:
        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –æ—Ç SubGram
        subgram_result = await get_subgram_tasks(user_id, callback.message.chat.id)
        
        if subgram_result.get("status") == "ok" and subgram_result.get("links"):
            link = subgram_result["links"][0]
            
            # –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –æ—Ç SubGram –≤ –±–∞–∑—É
            async with get_db_connection() as conn:
                task_id = await conn.fetchval('''
                    INSERT INTO tasks (name, url, reward, is_subgram, is_active)
                    VALUES ($1, $2, $3, TRUE, TRUE)
                    RETURNING id
                ''', "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–π –∫–∞–Ω–∞–ª", link, 0.3)
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", url=link)],
                [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data=f"check_task_{task_id}")],
                [InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_task")],
                [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            await callback.message.edit_text(
                f"üìã <b>–ó–∞–¥–∞–Ω–∏—è</b>\n\n"
                f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {completed_count}\n\n"
                f"üìù <b>–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç SubGram:</b>\n"
                f"üéØ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–π –∫–∞–Ω–∞–ª\n"
                f"üí´ –ù–∞–≥—Ä–∞–¥–∞: 0.3 –∑–≤—ë–∑–¥\n\n"
                f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è, –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.",
                reply_markup=keyboard, parse_mode="HTML"
            )
        else:
            keyboard = create_back_keyboard()
            await callback.message.edit_text(
                f"üìã <b>–ó–∞–¥–∞–Ω–∏—è</b>\n\n"
                f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {completed_count}\n\n"
                f"üéâ –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!\n"
                f"–ù–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ—è–≤—è—Ç—Å—è –ø–æ–∑–∂–µ.",
                reply_markup=keyboard, parse_mode="HTML"
            )
    
    await callback.answer()

@dp.callback_query(F.data.startswith("check_task_"))
async def callback_check_task(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    task_id = int(callback.data.split("_")[2])
    
    async with get_db_connection() as conn:
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ —É–∂–µ –∑–∞–¥–∞–Ω–∏–µ
        existing = await conn.fetchrow('''
            SELECT * FROM user_tasks 
            WHERE user_id = $1 AND task_id = $2
        ''', user_id, task_id)
        
        if existing and existing['completed']:
            await callback.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏
        task = await conn.fetchrow("SELECT * FROM tasks WHERE id = $1", task_id)
        if not task:
            await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
        if existing:
            await conn.execute('''
                UPDATE user_tasks 
                SET completed = TRUE, completed_at = NOW()
                WHERE user_id = $1 AND task_id = $2
            ''', user_id, task_id)
        else:
            await conn.execute('''
                INSERT INTO user_tasks (user_id, task_id, completed, completed_at)
                VALUES ($1, $2, TRUE, NOW())
            ''', user_id, task_id)
        
        # –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É
        await conn.execute('''
            UPDATE users 
            SET balance = balance + $1,
                total_earnings = total_earnings + $1,
                points = points + 1,
                weekly_points = weekly_points + 1
            WHERE user_id = $2
        ''', task['reward'], user_id)
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤—ã–ø–æ–ª–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2 –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –±–æ–Ω—É—Å–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        user_completed_tasks = await conn.fetchval('''
            SELECT COUNT(*) FROM user_tasks 
            WHERE user_id = $1 AND completed = TRUE
        ''', user_id)
        
        if user_completed_tasks >= 2:
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º
            referral = await conn.fetchrow('''
                SELECT * FROM referrals 
                WHERE referred_id = $1 AND reward_given = FALSE
            ''', user_id)
            
            if referral:
                # –î–∞—Ç—å –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É
                await conn.execute('''
                    UPDATE users 
                    SET balance = balance + 2,
                        referral_earnings = referral_earnings + 2,
                        total_earnings = total_earnings + 2,
                        points = points + 2,
                        weekly_points = weekly_points + 2
                    WHERE user_id = $1
                ''', referral['referrer_id'])
                
                # –û—Ç–º–µ—Ç–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª –∫–∞–∫ –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–Ω—ã–π
                await conn.execute('''
                    UPDATE referrals 
                    SET reward_given = TRUE 
                    WHERE referred_id = $1
                ''', user_id)
    
    await callback.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –ù–∞–≥—Ä–∞–¥–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∞!", show_alert=True)
    
    # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–¥–∞–Ω–∏—è–º
    await callback_tasks(callback)

@dp.callback_query(F.data == "skip_task")
async def callback_skip_task(callback: types.CallbackQuery):
    # –ü—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–¥–∞–Ω–∏—è–º
    await callback_tasks(callback)

# ================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –†–ï–ô–¢–ò–ù–ì–û–í
# ================================
@dp.callback_query(F.data == "ratings")
async def callback_ratings(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèÜ –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥", callback_data="rating_overall")],
        [InlineKeyboardButton(text="üìÖ –ù–µ–¥–µ–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥", callback_data="rating_weekly")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(
        "üèÜ <b>–†–µ–π—Ç–∏–Ω–≥–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n\n"
        "üí° <b>–ö–∞–∫ –ø–æ–ª—É—á–∞—Ç—å –æ—á–∫–∏:</b>\n"
        "‚Ä¢ 1 —Ä–µ—Ñ–µ—Ä–∞–ª = 2 –æ—á–∫–∞\n"
        "‚Ä¢ 1 –∑–∞–¥–∞–Ω–∏–µ = 1 –æ—á–∫–æ\n"
        "‚Ä¢ 1 –∫–ª–∏–∫ = 1 –æ—á–∫–æ\n"
        "‚Ä¢ 1 –±–∏–ª–µ—Ç –ª–æ—Ç–µ—Ä–µ–∏ = 1 –æ—á–∫–æ\n\n"
        "üéÅ <b>–ù–∞–≥—Ä–∞–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—å–Ω—ã–π —Ç–æ–ø 5:</b>\n"
        "ü•á 1 –º–µ—Å—Ç–æ: 100 –∑–≤—ë–∑–¥\n"
        "ü•à 2 –º–µ—Å—Ç–æ: 75 –∑–≤—ë–∑–¥\n"
        "ü•â 3 –º–µ—Å—Ç–æ: 50 –∑–≤—ë–∑–¥\n"
        "üèÖ 4 –º–µ—Å—Ç–æ: 25 –∑–≤—ë–∑–¥\n"
        "üèÖ 5 –º–µ—Å—Ç–æ: 15 –∑–≤—ë–∑–¥",
        reply_markup=keyboard, parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data == "rating_overall")
async def callback_rating_overall(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    
    async with get_db_connection() as conn:
        # –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—á–∫–∞–º
        top_users = await conn.fetch('''
            SELECT user_id, username, points,
                   ROW_NUMBER() OVER (ORDER BY points DESC) as rank
            FROM users 
            WHERE points > 0
            ORDER BY points DESC 
            LIMIT 10
        ''')
        
        # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_rank = await conn.fetchrow('''
            SELECT rank FROM (
                SELECT user_id, ROW_NUMBER() OVER (ORDER BY points DESC) as rank
                FROM users WHERE points > 0
            ) ranked 
            WHERE user_id = $1
        ''', user_id)
    
    rating_text = "üèÜ <b>–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –æ—á–∫–∞–º</b>\n\n"
    
    for i, user in enumerate(top_users):
        medal = "ü•á" if i == 0 else "ü•à" if i == 1 else "ü•â" if i == 2 else "üèÖ"
        username = f"@{user['username']}" if user['username'] else f"ID: {user['user_id']}"
        rating_text += f"{medal} {i+1}. {username} - {user['points']} –æ—á–∫–æ–≤\n"
    
    if user_rank:
        rating_text += f"\nüìç <b>–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è:</b> {user_rank['rank']} –º–µ—Å—Ç–æ"
    else:
        rating_text += f"\nüìç <b>–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è:</b> –ù–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="rating_overall")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="ratings")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(rating_text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@dp.callback_query(F.data == "rating_weekly")
async def callback_rating_weekly(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    
    async with get_db_connection() as conn:
        # –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –Ω–µ–¥–µ–ª—å–Ω—ã–º –æ—á–∫–∞–º
        top_users = await conn.fetch('''
            SELECT user_id, username, weekly_points,
                   ROW_NUMBER() OVER (ORDER BY weekly_points DESC) as rank
            FROM users 
            WHERE weekly_points > 0
            ORDER BY weekly_points DESC 
            LIMIT 10
        ''')
        
        # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_rank = await conn.fetchrow('''
            SELECT rank FROM (
                SELECT user_id, ROW_NUMBER() OVER (ORDER BY weekly_points DESC) as rank
                FROM users WHERE weekly_points > 0
            ) ranked 
            WHERE user_id = $1
        ''', user_id)
    
    rating_text = "üìÖ <b>–ù–µ–¥–µ–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –æ—á–∫–∞–º</b>\n\n"
    
    rewards = [100, 75, 50, 25, 15]
    for i, user in enumerate(top_users):
        medal = "ü•á" if i == 0 else "ü•à" if i == 1 else "ü•â" if i == 2 else "üèÖ"
        username = f"@{user['username']}" if user['username'] else f"ID: {user['user_id']}"
        reward_text = f" (+{rewards[i]} ‚≠ê)" if i < 5 else ""
        rating_text += f"{medal} {i+1}. {username} - {user['weekly_points']} –æ—á–∫–æ–≤{reward_text}\n"
    
    if user_rank:
        rating_text += f"\nüìç <b>–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è:</b> {user_rank['rank']} –º–µ—Å—Ç–æ"
    else:
        rating_text += f"\nüìç <b>–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è:</b> –ù–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ"
    
    rating_text += "\n\nüéÅ –ù–∞–≥—Ä–∞–¥—ã –≤—ã–¥–∞—é—Ç—Å—è –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 20:00 –ú–°–ö"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="rating_weekly")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="ratings")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(rating_text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

# ================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ï–ô–°–û–í
# ================================
@dp.callback_query(F.data == "cases")
async def callback_cases(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    
    async with get_db_connection() as conn:
        user = await conn.fetchrow("SELECT * FROM users WHERE user_id = $1", user_id)
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –æ—Ç–∫—Ä—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–µ–π—Å —Å–µ–≥–æ–¥–Ω—è
        if user['daily_case_opened']:
            keyboard = create_back_keyboard()
            await callback.message.edit_text(
                "üì¶ <b>–ö–µ–π—Å—ã</b>\n\n"
                "‚ùå –í—ã —É–∂–µ –æ—Ç–∫—Ä—ã–ª–∏ –∫–µ–π—Å —Å–µ–≥–æ–¥–Ω—è!\n"
                "–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞.",
                reply_markup=keyboard, parse_mode="HTML"
            )
            await callback.answer()
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ –¥–µ–Ω—å
        daily_refs = await conn.fetchval(
            "SELECT COUNT(*) FROM referrals WHERE referrer_id = $1 AND DATE(date_referred) = CURRENT_DATE", user_id
        ) or 0
        
        if daily_refs < 5:
            keyboard = create_back_keyboard()
            await callback.message.edit_text(
                f"üì¶ <b>–ö–µ–π—Å—ã</b>\n\n"
                f"‚ùå –î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞ –Ω—É–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ –¥–µ–Ω—å\n"
                f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {daily_refs}/5",
                reply_markup=keyboard, parse_mode="HTML"
            )
            await callback.answer()
            return
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¶ –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å", callback_data="open_case")],
            [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(
            f"üì¶ <b>–ö–µ–π—Å—ã</b>\n\n"
            f"‚úÖ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å!\n"
            f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {daily_refs}/5\n\n"
            f"üí´ –í –∫–µ–π—Å–µ –º–æ–∂–µ—Ç –≤—ã–ø–∞—Å—Ç—å –æ—Ç 1 –¥–æ 10 –∑–≤—ë–∑–¥",
            reply_markup=keyboard, parse_mode="HTML"
        )
    
    await callback.answer()

@dp.callback_query(F.data == "open_case")
async def callback_open_case(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    
    async with get_db_connection() as conn:
        user = await conn.fetchrow("SELECT * FROM users WHERE user_id = $1", user_id)
        
        if not user or user['daily_case_opened']:
            await callback.answer("‚ùå –ö–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ –¥–µ–Ω—å
        daily_refs = await conn.fetchval(
            "SELECT COUNT(*) FROM referrals WHERE referrer_id = $1 AND DATE(date_referred) = CURRENT_DATE", user_id
        ) or 0
        
        if daily_refs < 5:
            await callback.answer("‚ùå –ö–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return
        
        # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É (1-10 –∑–≤—ë–∑–¥)
        reward = random.randint(1, 10)
        
        # –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await conn.execute('''
            UPDATE users 
            SET balance = balance + $1,
                total_earnings = total_earnings + $1,
                daily_case_opened = TRUE
            WHERE user_id = $2
        ''', reward, user_id)
        
        new_balance = float(user['balance']) + reward
    
    keyboard = create_back_keyboard()
    await callback.message.edit_text(
        f"üì¶ <b>–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç!</b>\n\n"
        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {reward} –∑–≤—ë–∑–¥!\n"
        f"üí´ –í–∞—à –±–∞–ª–∞–Ω—Å: {new_balance} –∑–≤—ë–∑–¥\n\n"
        f"–°–ª–µ–¥—É—é—â–∏–π –∫–µ–π—Å –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–≤—Ç—Ä–∞ –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.",
        reply_markup=keyboard, parse_mode="HTML"
    )
    await callback.answer(f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {reward} –∑–≤—ë–∑–¥!")

# ================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –õ–û–¢–ï–†–ï–ò
# ================================
@dp.callback_query(F.data == "lottery")
async def callback_lottery(callback: types.CallbackQuery):
    async with get_db_connection() as conn:
        # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –ª–æ—Ç–µ—Ä–µ—é
        lottery = await conn.fetchrow('''
            SELECT * FROM lotteries 
            WHERE is_active = TRUE AND ended = FALSE 
            ORDER BY created_at DESC 
            LIMIT 1
        ''')
        
        if not lottery:
            keyboard = create_back_keyboard()
            await callback.message.edit_text(
                "üé≤ <b>–õ–æ—Ç–µ—Ä–µ—è</b>\n\n"
                "ÔøΩÔøΩÔøΩ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–π –Ω–µ—Ç\n"
                "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏!",
                reply_markup=keyboard, parse_mode="HTML"
            )
            await callback.answer()
            return
        
        # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –±–∏–ª–µ—Ç—ã
        remaining = lottery['ticket_count'] - lottery['tickets_sold']
        total_prize = lottery['tickets_sold'] * lottery['ticket_price']
        bot_share = total_prize * lottery['bot_percent'] / 100
        winner_share = total_prize - bot_share
        prize_per_winner = winner_share / lottery['winner_count'] if lottery['winner_count'] > 0 else 0
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"üé´ –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç ({lottery['ticket_price']} –∑–≤—ë–∑–¥)", 
            callback_data=f"buy_ticket_{lottery['id']}"
        )],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(
        f"üé≤ <b>–õ–æ—Ç–µ—Ä–µ—è #{lottery['id']}</b>\n\n"
        f"üé´ –¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞: {lottery['ticket_price']} –∑–≤—ë–∑–¥\n"
        f"üìä –ü—Ä–æ–¥–∞–Ω–æ –±–∏–ª–µ—Ç–æ–≤: {lottery['tickets_sold']}/{lottery['ticket_count']}\n"
        f"üéØ –û—Å—Ç–∞–ª–æ—Å—å ÔøΩÔøΩ–∏–ª–µ—Ç–æ–≤: {remaining}\n"
        f"üèÜ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {lottery['winner_count']}\n"
        f"üí∞ –û–±—â–∏–π –ø—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥: {total_prize} –∑–≤—ë–∑–¥\n"
        f"üí´ –ü—Ä–∏–∑ –∫–∞–∂–¥–æ–º—É –ø–æ–±–µ–¥–∏—Ç–µ–ª—é: ~{prize_per_winner:.1f} –∑–≤—ë–∑–¥\n\n"
        f"–õ–æ—Ç–µ—Ä–µ—è –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –≤—Å–µ –±–∏–ª–µ—Ç—ã –±—É–¥—É—Ç –ø—Ä–æ–¥–∞–Ω—ã.",
        reply_markup=keyboard, parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("buy_ticket_"))
async def callback_buy_ticket(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    lottery_id = int(callback.data.split("_")[2])
    
    async with get_db_connection() as conn:
        lottery = await conn.fetchrow("SELECT * FROM lotteries WHERE id = $1", lottery_id)
        user = await conn.fetchrow("SELECT balance FROM users WHERE user_id = $1", user_id)
        
        if not lottery or not user:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
            return
        
        if lottery['ended'] or lottery['tickets_sold'] >= lottery['ticket_count']:
            await callback.answer("‚ùå –õ–æ—Ç–µ—Ä–µ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞", show_alert=True)
            return
        
        if user['balance'] < lottery['ticket_price']:
            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", show_alert=True)
            return
        
        # –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç
        ticket_number = lottery['tickets_sold'] + 1
        
        await conn.execute('''
            INSERT INTO lottery_tickets (lottery_id, user_id, ticket_number)
            VALUES ($1, $2, $3)
        ''', lottery_id, user_id, ticket_number)
        
        # –û–±–Ω–æ–≤–∏—Ç—å –ª–æ—Ç–µ—Ä–µ—é
        await conn.execute('''
            UPDATE lotteries 
            SET tickets_sold = tickets_sold + 1
            WHERE id = $1
        ''', lottery_id)
        
        # –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await conn.execute('''
            UPDATE users 
            SET balance = balance - $1,
                points = points + 1,
                weekly_points = weekly_points + 1
            WHERE user_id = $2
        ''', lottery['ticket_price'], user_id)
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –ª–æ—Ç–µ—Ä–µ—è
        if ticket_number >= lottery['ticket_count']:
            await end_lottery(lottery_id)
        
        new_balance = float(user['balance']) - lottery['ticket_price']
    
    await callback.answer(f"‚úÖ –ë–∏–ª–µ—Ç #{ticket_number} –∫—É–ø–ª–µ–Ω!", show_alert=True)
    
    # –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞ÔøΩÔøΩ–µ–Ω–∏–µ –ª–æ—Ç–µ—Ä–µ–∏
    await callback_lottery(callback)

async def end_lottery(lottery_id: int):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –ª–æ—Ç–µ—Ä–µ—é –∏ –≤—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π"""
    async with get_db_connection() as conn:
        lottery = await conn.fetchrow("SELECT * FROM lotteries WHERE id = $1", lottery_id)
        
        if not lottery or lottery['ended']:
            return
        
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –±–∏–ª–µ—Ç—ã
        tickets = await conn.fetch('''
            SELECT * FROM lottery_tickets 
            WHERE lottery_id = $1 
            ORDER BY ticket_number
        ''', lottery_id)
        
        if len(tickets) == 0:
            return
        
        # –í—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
        winners = random.sample(tickets, min(lottery['winner_count'], len(tickets)))
        
        # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏–∑—ã
        total_prize = lottery['tickets_sold'] * lottery['ticket_price']
        bot_share = total_prize * lottery['bot_percent'] / 100
        winner_share = total_prize - bot_share
        prize_per_winner = winner_share / len(winners)
        
        # –ù–∞–≥—Ä–∞–¥–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
        for winner in winners:
            await conn.execute('''
                UPDATE users 
                SET balance = balance + $1
                WHERE user_id = $2
            ''', prize_per_winner, winner['user_id'])
        
        # –û—Ç–º–µ—Ç–∏—Ç—å –ª–æ—Ç–µ—Ä–µ—é –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
        await conn.execute('''
            UPDATE lotteries 
            SET ended = TRUE, ended_at = NOW()
            WHERE id = $1
        ''', lottery_id)
        
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —á–∞—Ç –≤—ã–ø–ª–∞—Ç
        winners_text = "\n".join([f"üé´ –ë–∏–ª–µ—Ç #{w['ticket_number']} - ID: {w['user_id']} - {prize_per_winner:.1f} –∑–≤—ë–∑–¥" for w in winners])
        
        result_text = f"""üé≤ <b>–õ–æ—Ç–µ—Ä–µ—è #{lottery_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

üìä –í—Å–µ–≥–æ –±–∏–ª–µ—Ç–æ–≤: {lottery['tickets_sold']}
üí∞ –û–±—â–∏–π —Ñ–æ–Ω–¥: {total_prize} –∑–≤—ë–∑–¥
ü§ñ –î–æ–ª—è –±–æ—Ç–∞: {bot_share:.1f} –∑–≤—ë–∑–¥
üèÜ –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥: {winner_share:.1f} –∑–≤—ë–∑–¥

üéâ <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:</b>
{winners_text}"""
        
        try:
            await bot.send_message(PAYMENTS_CHAT_ID, result_text, parse_mode="HTML")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ª–æ—Ç–µ—Ä–µ–∏: {e}")

# ================================
# –û–°–¢–ê–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
# ================================
@dp.callback_query(F.data == "instructions")
async def callback_instructions(callback: types.CallbackQuery):
    keyboard = create_back_keyboard()
    text = """üìö <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –±–æ—Ç—É</b>

üåü <b>–ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤—ë–∑–¥—ã:</b>

üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Å—Å—ã–ª–∫–µ
‚Ä¢ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: 2 –∑–≤–µ–∑–¥—ã

üñ± <b>–ö–ª–∏–∫–µ—Ä</b>
‚Ä¢ –î–æ 10 –∫–ª–∏–∫–æ–≤ –≤ –¥–µ–Ω—å
‚Ä¢ –ó–∞ –∫–ª–∏–∫: 0.1 –∑–≤–µ–∑–¥—ã
‚Ä¢ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è

üìã <b>–ó–∞–¥–∞–Ω–∏—è</b>
‚Ä¢ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç —Å–ø–æ–Ω—Å–æ—Ä–æ–≤
‚Ä¢ –ó–∞ –∑–∞–¥–∞–Ω–∏–µ: 0.3 –∑–≤–µ–∑–¥—ã

üì¶ <b>–ö–µ–π—Å—ã</b>
‚Ä¢ 1 –∫–µ–π—Å –≤ –¥–µ–Ω—å –ø—Ä–∏ 5 —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö
‚Ä¢ –í –∫–µ–π—Å–µ: 1-10 –∑–≤—ë–∑–¥

üé≤ <b>–õ–æ—Ç–µ—Ä–µ–∏</b>
‚Ä¢ –ü–æ–∫—É–ø–∞–π—Ç–µ –±–∏–ª–µ—Ç—ã
‚Ä¢ –í—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ –ø—Ä–∏–∑—ã

üèÜ <b>–†–µ–π—Ç–∏–Ω–≥–∏</b>
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –æ—á–∫–∏ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
‚Ä¢ –¢–æ–ø 5 –ø–æ–ª—É—á–∞—é—Ç –±–æ–Ω—É—Å—ã

üí´ <b>–í—ã–≤–æ–¥</b>
‚Ä¢ –û—Ç 15 –∑–≤—ë–∑–¥
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"""

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

# –ó–∞–≥–ª—É—à–∫–∏ –ø–æ–∫–∞ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
@dp.callback_query(F.data == "promo_code")
async def callback_promo_code(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(UserStates.waiting_for_promo_code)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="profile")]
    ])
    
    await callback.message.edit_text(
        "üé´ <b>–ü—Ä–æ–º–æ–∫–æ–¥</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã:",
        reply_markup=keyboard, parse_mode="HTML"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
@dp.message(UserStates.waiting_for_promo_code)
async def handle_promo_code_input(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    promo_code = message.text.strip().upper()
    
    async with get_db_connection() as conn:
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥
        promo = await conn.fetchrow('''
            SELECT * FROM promo_codes 
            WHERE code = $1 AND is_active = TRUE
        ''', promo_code)
        
        if not promo:
            keyboard = create_profile_keyboard()
            await message.answer(
                "‚ùå <b>–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω</b>\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=keyboard, parse_mode="HTML"
            )
            await state.clear()
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
        if promo['current_uses'] >= promo['max_uses']:
            keyboard = create_profile_keyboard()
            await message.answer(
                "‚ùå <b>–ü—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
                "–õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω.",
                reply_markup=keyboard, parse_mode="HTML"
            )
            await state.clear()
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥
        existing_use = await conn.fetchrow('''
            SELECT * FROM promo_uses 
            WHERE user_id = $1 AND promo_id = $2
        ''', user_id, promo['id'])
        
        if existing_use:
            keyboard = create_profile_keyboard()
            await message.answer(
                "‚ùå <b>–ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω</b>\n\n"
                "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —Ä–∞–Ω–µ–µ.",
                reply_markup=keyboard, parse_mode="HTML"
            )
            await state.clear()
            return
        
        # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
        await conn.execute('''
            INSERT INTO promo_uses (user_id, promo_id)
            VALUES ($1, $2)
        ''', user_id, promo['id'])
        
        # –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
        await conn.execute('''
            UPDATE promo_codes 
            SET current_uses = current_uses + 1
            WHERE id = $1
        ''', promo['id'])
        
        # –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await conn.execute('''
            UPDATE users 
            SET balance = balance + $1,
                total_earnings = total_earnings + $1
            WHERE user_id = $2
        ''', promo['reward'], user_id)
        
        # –ü–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
        user = await conn.fetchrow("SELECT balance FROM users WHERE user_id = $1", user_id)
    
    keyboard = create_profile_keyboard()
    await message.answer(
        f"üéâ <b>–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!</b>\n\n"
        f"üé´ –ü—Ä–æ–º–æ–∫–æ–¥: {promo_code}\n"
        f"üí´ –ù–∞–≥—Ä–∞–¥–∞: {promo['reward']} –∑–≤—ë–∑–¥\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']} –∑–≤—ë–∑–¥",
        reply_markup=keyboard, parse_mode="HTML"
    )
    
    await state.clear()

@dp.callback_query(F.data == "insufficient_funds")
async def callback_insufficient_funds(callback: types.CallbackQuery):
    await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", show_alert=True)

# –ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∏ –ø–æ–∫–∞)
@dp.callback_query(F.data.startswith("admin_"))
async def callback_admin_placeholder(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    await callback.answer("üöß –ê–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
